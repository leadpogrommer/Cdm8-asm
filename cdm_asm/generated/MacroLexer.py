# Generated from Macro.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,17,141,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,0,1,0,1,0,1,0,1,
        1,5,1,43,8,1,10,1,12,1,46,9,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,54,8,1,
        10,1,12,1,57,9,1,1,1,3,1,60,8,1,1,1,1,1,1,2,4,2,65,8,2,11,2,12,2,
        66,1,3,3,3,70,8,3,1,3,1,3,1,4,1,4,5,4,76,8,4,10,4,12,4,79,9,4,1,
        4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,5,9,93,8,9,10,9,12,
        9,96,9,9,1,9,1,9,1,9,1,9,5,9,102,8,9,10,9,12,9,105,9,9,5,9,107,8,
        9,10,9,12,9,110,9,9,1,9,1,9,1,10,1,10,1,10,1,10,3,10,118,8,10,1,
        10,1,10,1,11,1,11,5,11,124,8,11,10,11,12,11,127,9,11,1,12,1,12,1,
        13,1,13,1,14,1,14,1,15,1,15,1,16,4,16,138,8,16,11,16,12,16,139,0,
        0,17,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,1,0,9,2,0,9,9,32,32,1,0,10,10,2,0,58,
        58,62,62,3,0,10,10,34,34,92,92,3,0,10,10,39,39,92,92,3,0,65,90,95,
        95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,40,41,43,43,
        45,46,152,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,1,35,1,0,0,0,3,44,1,0,0,0,5,64,1,
        0,0,0,7,69,1,0,0,0,9,73,1,0,0,0,11,82,1,0,0,0,13,84,1,0,0,0,15,86,
        1,0,0,0,17,88,1,0,0,0,19,90,1,0,0,0,21,113,1,0,0,0,23,121,1,0,0,
        0,25,128,1,0,0,0,27,130,1,0,0,0,29,132,1,0,0,0,31,134,1,0,0,0,33,
        137,1,0,0,0,35,36,5,109,0,0,36,37,5,97,0,0,37,38,5,99,0,0,38,39,
        5,114,0,0,39,40,5,111,0,0,40,2,1,0,0,0,41,43,7,0,0,0,42,41,1,0,0,
        0,43,46,1,0,0,0,44,42,1,0,0,0,44,45,1,0,0,0,45,47,1,0,0,0,46,44,
        1,0,0,0,47,48,5,109,0,0,48,49,5,101,0,0,49,50,5,110,0,0,50,51,5,
        100,0,0,51,55,1,0,0,0,52,54,7,0,0,0,53,52,1,0,0,0,54,57,1,0,0,0,
        55,53,1,0,0,0,55,56,1,0,0,0,56,59,1,0,0,0,57,55,1,0,0,0,58,60,5,
        13,0,0,59,58,1,0,0,0,59,60,1,0,0,0,60,61,1,0,0,0,61,62,5,10,0,0,
        62,4,1,0,0,0,63,65,7,0,0,0,64,63,1,0,0,0,65,66,1,0,0,0,66,64,1,0,
        0,0,66,67,1,0,0,0,67,6,1,0,0,0,68,70,5,13,0,0,69,68,1,0,0,0,69,70,
        1,0,0,0,70,71,1,0,0,0,71,72,5,10,0,0,72,8,1,0,0,0,73,77,5,35,0,0,
        74,76,8,1,0,0,75,74,1,0,0,0,76,79,1,0,0,0,77,75,1,0,0,0,77,78,1,
        0,0,0,78,80,1,0,0,0,79,77,1,0,0,0,80,81,6,4,0,0,81,10,1,0,0,0,82,
        83,5,42,0,0,83,12,1,0,0,0,84,85,5,44,0,0,85,14,1,0,0,0,86,87,7,2,
        0,0,87,16,1,0,0,0,88,89,5,63,0,0,89,18,1,0,0,0,90,94,5,34,0,0,91,
        93,8,3,0,0,92,91,1,0,0,0,93,96,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,
        0,95,108,1,0,0,0,96,94,1,0,0,0,97,98,5,92,0,0,98,99,9,0,0,0,99,103,
        1,0,0,0,100,102,8,3,0,0,101,100,1,0,0,0,102,105,1,0,0,0,103,101,
        1,0,0,0,103,104,1,0,0,0,104,107,1,0,0,0,105,103,1,0,0,0,106,97,1,
        0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,111,1,
        0,0,0,110,108,1,0,0,0,111,112,5,34,0,0,112,20,1,0,0,0,113,117,5,
        39,0,0,114,115,5,92,0,0,115,118,9,0,0,0,116,118,8,4,0,0,117,114,
        1,0,0,0,117,116,1,0,0,0,118,119,1,0,0,0,119,120,5,39,0,0,120,22,
        1,0,0,0,121,125,7,5,0,0,122,124,7,6,0,0,123,122,1,0,0,0,124,127,
        1,0,0,0,125,123,1,0,0,0,125,126,1,0,0,0,126,24,1,0,0,0,127,125,1,
        0,0,0,128,129,7,7,0,0,129,26,1,0,0,0,130,131,5,47,0,0,131,28,1,0,
        0,0,132,133,5,39,0,0,133,30,1,0,0,0,134,135,5,36,0,0,135,32,1,0,
        0,0,136,138,7,8,0,0,137,136,1,0,0,0,138,139,1,0,0,0,139,137,1,0,
        0,0,139,140,1,0,0,0,140,34,1,0,0,0,13,0,44,55,59,66,69,77,94,103,
        108,117,125,139,1,6,0,0
    ]

class MacroLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Macro = 1
    MACRO_FOOTER = 2
    WS = 3
    NEWLINE = 4
    COMMENT = 5
    ASTERISK = 6
    COMMA = 7
    LABEL_END = 8
    QUESTION_MARK = 9
    STRING = 10
    CHAR = 11
    NAME = 12
    DIGIT = 13
    SLASH = 14
    APOSTROPHE = 15
    DOLLAR_SIGN = 16
    OTHER = 17

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'macro'", "'*'", "','", "'?'", "'/'", "'''", "'$'" ]

    symbolicNames = [ "<INVALID>",
            "Macro", "MACRO_FOOTER", "WS", "NEWLINE", "COMMENT", "ASTERISK", 
            "COMMA", "LABEL_END", "QUESTION_MARK", "STRING", "CHAR", "NAME", 
            "DIGIT", "SLASH", "APOSTROPHE", "DOLLAR_SIGN", "OTHER" ]

    ruleNames = [ "Macro", "MACRO_FOOTER", "WS", "NEWLINE", "COMMENT", "ASTERISK", 
                  "COMMA", "LABEL_END", "QUESTION_MARK", "STRING", "CHAR", 
                  "NAME", "DIGIT", "SLASH", "APOSTROPHE", "DOLLAR_SIGN", 
                  "OTHER" ]

    grammarFileName = "Macro.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


