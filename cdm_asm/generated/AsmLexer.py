# Generated from AsmLexer.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,45,323,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,1,0,1,
        0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,
        6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,
        10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,
        14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,
        19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,
        21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,
        26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,
        32,1,33,1,33,1,33,1,34,1,34,5,34,238,8,34,10,34,12,34,241,9,34,1,
        35,4,35,244,8,35,11,35,12,35,245,1,36,1,36,1,36,1,36,4,36,252,8,
        36,11,36,12,36,253,1,37,1,37,1,37,1,37,4,37,260,8,37,11,37,12,37,
        261,1,38,1,38,5,38,266,8,38,10,38,12,38,269,9,38,1,38,1,38,1,38,
        1,38,5,38,275,8,38,10,38,12,38,278,9,38,5,38,280,8,38,10,38,12,38,
        283,9,38,1,38,1,38,1,39,1,39,1,39,1,39,3,39,291,8,39,1,39,1,39,1,
        40,3,40,296,8,40,1,40,1,40,1,41,1,41,5,41,302,8,41,10,41,12,41,305,
        9,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,4,43,
        318,8,43,11,43,12,43,319,1,44,1,44,0,0,45,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
        79,40,81,41,83,42,85,43,87,44,89,45,1,0,12,1,0,48,51,3,0,65,90,95,
        95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,1,0,48,49,3,0,48,
        57,65,70,97,102,3,0,10,10,34,34,92,92,3,0,10,10,39,39,92,92,1,0,
        10,10,2,0,9,9,32,32,5,0,43,43,47,57,61,61,65,90,97,122,1,0,0,65534,
        333,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
        0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
        0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,
        0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,
        1,91,1,0,0,0,3,97,1,0,0,0,5,103,1,0,0,0,7,112,1,0,0,0,9,115,1,0,
        0,0,11,120,1,0,0,0,13,124,1,0,0,0,15,128,1,0,0,0,17,131,1,0,0,0,
        19,136,1,0,0,0,21,139,1,0,0,0,23,142,1,0,0,0,25,148,1,0,0,0,27,156,
        1,0,0,0,29,162,1,0,0,0,31,167,1,0,0,0,33,173,1,0,0,0,35,178,1,0,
        0,0,37,185,1,0,0,0,39,191,1,0,0,0,41,196,1,0,0,0,43,202,1,0,0,0,
        45,206,1,0,0,0,47,211,1,0,0,0,49,213,1,0,0,0,51,215,1,0,0,0,53,217,
        1,0,0,0,55,219,1,0,0,0,57,221,1,0,0,0,59,223,1,0,0,0,61,225,1,0,
        0,0,63,227,1,0,0,0,65,229,1,0,0,0,67,232,1,0,0,0,69,235,1,0,0,0,
        71,243,1,0,0,0,73,247,1,0,0,0,75,255,1,0,0,0,77,263,1,0,0,0,79,286,
        1,0,0,0,81,295,1,0,0,0,83,299,1,0,0,0,85,308,1,0,0,0,87,312,1,0,
        0,0,89,321,1,0,0,0,91,92,5,97,0,0,92,93,5,115,0,0,93,94,5,101,0,
        0,94,95,5,99,0,0,95,96,5,116,0,0,96,2,1,0,0,0,97,98,5,98,0,0,98,
        99,5,114,0,0,99,100,5,101,0,0,100,101,5,97,0,0,101,102,5,107,0,0,
        102,4,1,0,0,0,103,104,5,99,0,0,104,105,5,111,0,0,105,106,5,110,0,
        0,106,107,5,116,0,0,107,108,5,105,0,0,108,109,5,110,0,0,109,110,
        5,117,0,0,110,111,5,101,0,0,111,6,1,0,0,0,112,113,5,100,0,0,113,
        114,5,111,0,0,114,8,1,0,0,0,115,116,5,101,0,0,116,117,5,108,0,0,
        117,118,5,115,0,0,118,119,5,101,0,0,119,10,1,0,0,0,120,121,5,101,
        0,0,121,122,5,110,0,0,122,123,5,100,0,0,123,12,1,0,0,0,124,125,5,
        101,0,0,125,126,5,120,0,0,126,127,5,116,0,0,127,14,1,0,0,0,128,129,
        5,102,0,0,129,130,5,105,0,0,130,16,1,0,0,0,131,132,5,103,0,0,132,
        133,5,111,0,0,133,134,5,116,0,0,134,135,5,111,0,0,135,18,1,0,0,0,
        136,137,5,105,0,0,137,138,5,102,0,0,138,20,1,0,0,0,139,140,5,105,
        0,0,140,141,5,115,0,0,141,22,1,0,0,0,142,143,5,109,0,0,143,144,5,
        97,0,0,144,145,5,99,0,0,145,146,5,114,0,0,146,147,5,111,0,0,147,
        24,1,0,0,0,148,149,5,114,0,0,149,150,5,101,0,0,150,151,5,115,0,0,
        151,152,5,116,0,0,152,153,5,111,0,0,153,154,5,114,0,0,154,155,5,
        101,0,0,155,26,1,0,0,0,156,157,5,114,0,0,157,158,5,115,0,0,158,159,
        5,101,0,0,159,160,5,99,0,0,160,161,5,116,0,0,161,28,1,0,0,0,162,
        163,5,115,0,0,163,164,5,97,0,0,164,165,5,118,0,0,165,166,5,101,0,
        0,166,30,1,0,0,0,167,168,5,115,0,0,168,169,5,116,0,0,169,170,5,97,
        0,0,170,171,5,121,0,0,171,172,5,115,0,0,172,32,1,0,0,0,173,174,5,
        116,0,0,174,175,5,104,0,0,175,176,5,101,0,0,176,177,5,110,0,0,177,
        34,1,0,0,0,178,179,5,116,0,0,179,180,5,112,0,0,180,181,5,108,0,0,
        181,182,5,97,0,0,182,183,5,116,0,0,183,184,5,101,0,0,184,36,1,0,
        0,0,185,186,5,117,0,0,186,187,5,110,0,0,187,188,5,116,0,0,188,189,
        5,105,0,0,189,190,5,108,0,0,190,38,1,0,0,0,191,192,5,119,0,0,192,
        193,5,101,0,0,193,194,5,110,0,0,194,195,5,100,0,0,195,40,1,0,0,0,
        196,197,5,119,0,0,197,198,5,104,0,0,198,199,5,105,0,0,199,200,5,
        108,0,0,200,201,5,101,0,0,201,42,1,0,0,0,202,203,5,108,0,0,203,204,
        5,111,0,0,204,205,5,119,0,0,205,44,1,0,0,0,206,207,5,104,0,0,207,
        208,5,105,0,0,208,209,5,103,0,0,209,210,5,104,0,0,210,46,1,0,0,0,
        211,212,5,46,0,0,212,48,1,0,0,0,213,214,5,44,0,0,214,50,1,0,0,0,
        215,216,5,43,0,0,216,52,1,0,0,0,217,218,5,45,0,0,218,54,1,0,0,0,
        219,220,5,58,0,0,220,56,1,0,0,0,221,222,5,42,0,0,222,58,1,0,0,0,
        223,224,5,62,0,0,224,60,1,0,0,0,225,226,5,40,0,0,226,62,1,0,0,0,
        227,228,5,41,0,0,228,64,1,0,0,0,229,230,5,45,0,0,230,231,5,124,0,
        0,231,66,1,0,0,0,232,233,5,114,0,0,233,234,7,0,0,0,234,68,1,0,0,
        0,235,239,7,1,0,0,236,238,7,2,0,0,237,236,1,0,0,0,238,241,1,0,0,
        0,239,237,1,0,0,0,239,240,1,0,0,0,240,70,1,0,0,0,241,239,1,0,0,0,
        242,244,7,3,0,0,243,242,1,0,0,0,244,245,1,0,0,0,245,243,1,0,0,0,
        245,246,1,0,0,0,246,72,1,0,0,0,247,248,5,48,0,0,248,249,5,98,0,0,
        249,251,1,0,0,0,250,252,7,4,0,0,251,250,1,0,0,0,252,253,1,0,0,0,
        253,251,1,0,0,0,253,254,1,0,0,0,254,74,1,0,0,0,255,256,5,48,0,0,
        256,257,5,120,0,0,257,259,1,0,0,0,258,260,7,5,0,0,259,258,1,0,0,
        0,260,261,1,0,0,0,261,259,1,0,0,0,261,262,1,0,0,0,262,76,1,0,0,0,
        263,267,5,34,0,0,264,266,8,6,0,0,265,264,1,0,0,0,266,269,1,0,0,0,
        267,265,1,0,0,0,267,268,1,0,0,0,268,281,1,0,0,0,269,267,1,0,0,0,
        270,271,5,92,0,0,271,272,9,0,0,0,272,276,1,0,0,0,273,275,8,6,0,0,
        274,273,1,0,0,0,275,278,1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,
        277,280,1,0,0,0,278,276,1,0,0,0,279,270,1,0,0,0,280,283,1,0,0,0,
        281,279,1,0,0,0,281,282,1,0,0,0,282,284,1,0,0,0,283,281,1,0,0,0,
        284,285,5,34,0,0,285,78,1,0,0,0,286,290,5,39,0,0,287,288,5,92,0,
        0,288,291,9,0,0,0,289,291,8,7,0,0,290,287,1,0,0,0,290,289,1,0,0,
        0,291,292,1,0,0,0,292,293,5,39,0,0,293,80,1,0,0,0,294,296,5,13,0,
        0,295,294,1,0,0,0,295,296,1,0,0,0,296,297,1,0,0,0,297,298,5,10,0,
        0,298,82,1,0,0,0,299,303,5,35,0,0,300,302,8,8,0,0,301,300,1,0,0,
        0,302,305,1,0,0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,306,1,0,0,
        0,305,303,1,0,0,0,306,307,6,41,0,0,307,84,1,0,0,0,308,309,7,9,0,
        0,309,310,1,0,0,0,310,311,6,42,0,0,311,86,1,0,0,0,312,313,5,102,
        0,0,313,314,5,112,0,0,314,315,5,45,0,0,315,317,1,0,0,0,316,318,7,
        10,0,0,317,316,1,0,0,0,318,319,1,0,0,0,319,317,1,0,0,0,319,320,1,
        0,0,0,320,88,1,0,0,0,321,322,7,11,0,0,322,90,1,0,0,0,12,0,239,245,
        253,261,267,276,281,290,295,303,319,1,6,0,0
    ]

class AsmLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Asect = 1
    Break = 2
    Continue = 3
    Do = 4
    Else = 5
    End = 6
    Ext = 7
    Fi = 8
    Goto = 9
    If = 10
    Is = 11
    Macro = 12
    Restore = 13
    Rsect = 14
    Save = 15
    Stays = 16
    Then = 17
    Tplate = 18
    Until = 19
    Wend = 20
    While = 21
    Low = 22
    High = 23
    DOT = 24
    COMMA = 25
    PLUS = 26
    MINUS = 27
    COLON = 28
    ASTERISK = 29
    ANGLE_BRACKET = 30
    OPEN_PAREN = 31
    CLOSE_PAREN = 32
    LINE_MARK_MARKER = 33
    REGISTER = 34
    WORD = 35
    DECIMAL_NUMBER = 36
    BINARY_NUMBER = 37
    HEX_NUMBER = 38
    STRING = 39
    CHAR = 40
    NEWLINE = 41
    COMMENT = 42
    WS = 43
    BASE64 = 44
    UNEXPECTED_TOKEN = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'asect'", "'break'", "'continue'", "'do'", "'else'", "'end'", 
            "'ext'", "'fi'", "'goto'", "'if'", "'is'", "'macro'", "'restore'", 
            "'rsect'", "'save'", "'stays'", "'then'", "'tplate'", "'until'", 
            "'wend'", "'while'", "'low'", "'high'", "'.'", "','", "'+'", 
            "'-'", "':'", "'*'", "'>'", "'('", "')'", "'-|'" ]

    symbolicNames = [ "<INVALID>",
            "Asect", "Break", "Continue", "Do", "Else", "End", "Ext", "Fi", 
            "Goto", "If", "Is", "Macro", "Restore", "Rsect", "Save", "Stays", 
            "Then", "Tplate", "Until", "Wend", "While", "Low", "High", "DOT", 
            "COMMA", "PLUS", "MINUS", "COLON", "ASTERISK", "ANGLE_BRACKET", 
            "OPEN_PAREN", "CLOSE_PAREN", "LINE_MARK_MARKER", "REGISTER", 
            "WORD", "DECIMAL_NUMBER", "BINARY_NUMBER", "HEX_NUMBER", "STRING", 
            "CHAR", "NEWLINE", "COMMENT", "WS", "BASE64", "UNEXPECTED_TOKEN" ]

    ruleNames = [ "Asect", "Break", "Continue", "Do", "Else", "End", "Ext", 
                  "Fi", "Goto", "If", "Is", "Macro", "Restore", "Rsect", 
                  "Save", "Stays", "Then", "Tplate", "Until", "Wend", "While", 
                  "Low", "High", "DOT", "COMMA", "PLUS", "MINUS", "COLON", 
                  "ASTERISK", "ANGLE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", 
                  "LINE_MARK_MARKER", "REGISTER", "WORD", "DECIMAL_NUMBER", 
                  "BINARY_NUMBER", "HEX_NUMBER", "STRING", "CHAR", "NEWLINE", 
                  "COMMENT", "WS", "BASE64", "UNEXPECTED_TOKEN" ]

    grammarFileName = "AsmLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


