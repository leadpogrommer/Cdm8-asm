# Generated from AsmLexer.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,47,333,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,
        1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,
        1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,
        1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,
        1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,
        1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
        1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,
        1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,
        1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,
        1,35,1,36,1,36,5,36,248,8,36,10,36,12,36,251,9,36,1,37,4,37,254,
        8,37,11,37,12,37,255,1,38,1,38,1,38,1,38,4,38,262,8,38,11,38,12,
        38,263,1,39,1,39,1,39,1,39,4,39,270,8,39,11,39,12,39,271,1,40,1,
        40,5,40,276,8,40,10,40,12,40,279,9,40,1,40,1,40,1,40,1,40,5,40,285,
        8,40,10,40,12,40,288,9,40,5,40,290,8,40,10,40,12,40,293,9,40,1,40,
        1,40,1,41,1,41,1,41,1,41,3,41,301,8,41,1,41,1,41,1,42,3,42,306,8,
        42,1,42,1,42,1,43,1,43,5,43,312,8,43,10,43,12,43,315,9,43,1,43,1,
        43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,4,45,328,8,45,11,
        45,12,45,329,1,46,1,46,0,0,47,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
        17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
        39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
        61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,
        83,42,85,43,87,44,89,45,91,46,93,47,1,0,12,1,0,48,51,3,0,65,90,95,
        95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,1,0,48,49,3,0,48,
        57,65,70,97,102,3,0,10,10,34,34,92,92,3,0,10,10,39,39,92,92,1,0,
        10,10,2,0,9,9,32,32,5,0,43,43,47,57,61,61,65,90,97,122,1,0,0,65534,
        343,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
        0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
        0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,
        0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,
        0,91,1,0,0,0,0,93,1,0,0,0,1,95,1,0,0,0,3,101,1,0,0,0,5,107,1,0,0,
        0,7,116,1,0,0,0,9,119,1,0,0,0,11,122,1,0,0,0,13,125,1,0,0,0,15,130,
        1,0,0,0,17,134,1,0,0,0,19,138,1,0,0,0,21,141,1,0,0,0,23,146,1,0,
        0,0,25,149,1,0,0,0,27,152,1,0,0,0,29,158,1,0,0,0,31,166,1,0,0,0,
        33,172,1,0,0,0,35,177,1,0,0,0,37,183,1,0,0,0,39,188,1,0,0,0,41,195,
        1,0,0,0,43,201,1,0,0,0,45,206,1,0,0,0,47,212,1,0,0,0,49,216,1,0,
        0,0,51,221,1,0,0,0,53,223,1,0,0,0,55,225,1,0,0,0,57,227,1,0,0,0,
        59,229,1,0,0,0,61,231,1,0,0,0,63,233,1,0,0,0,65,235,1,0,0,0,67,237,
        1,0,0,0,69,239,1,0,0,0,71,242,1,0,0,0,73,245,1,0,0,0,75,253,1,0,
        0,0,77,257,1,0,0,0,79,265,1,0,0,0,81,273,1,0,0,0,83,296,1,0,0,0,
        85,305,1,0,0,0,87,309,1,0,0,0,89,318,1,0,0,0,91,322,1,0,0,0,93,331,
        1,0,0,0,95,96,5,97,0,0,96,97,5,115,0,0,97,98,5,101,0,0,98,99,5,99,
        0,0,99,100,5,116,0,0,100,2,1,0,0,0,101,102,5,98,0,0,102,103,5,114,
        0,0,103,104,5,101,0,0,104,105,5,97,0,0,105,106,5,107,0,0,106,4,1,
        0,0,0,107,108,5,99,0,0,108,109,5,111,0,0,109,110,5,110,0,0,110,111,
        5,116,0,0,111,112,5,105,0,0,112,113,5,110,0,0,113,114,5,117,0,0,
        114,115,5,101,0,0,115,6,1,0,0,0,116,117,5,100,0,0,117,118,5,99,0,
        0,118,8,1,0,0,0,119,120,5,100,0,0,120,121,5,111,0,0,121,10,1,0,0,
        0,122,123,5,100,0,0,123,124,5,115,0,0,124,12,1,0,0,0,125,126,5,101,
        0,0,126,127,5,108,0,0,127,128,5,115,0,0,128,129,5,101,0,0,129,14,
        1,0,0,0,130,131,5,101,0,0,131,132,5,110,0,0,132,133,5,100,0,0,133,
        16,1,0,0,0,134,135,5,101,0,0,135,136,5,120,0,0,136,137,5,116,0,0,
        137,18,1,0,0,0,138,139,5,102,0,0,139,140,5,105,0,0,140,20,1,0,0,
        0,141,142,5,103,0,0,142,143,5,111,0,0,143,144,5,116,0,0,144,145,
        5,111,0,0,145,22,1,0,0,0,146,147,5,105,0,0,147,148,5,102,0,0,148,
        24,1,0,0,0,149,150,5,105,0,0,150,151,5,115,0,0,151,26,1,0,0,0,152,
        153,5,109,0,0,153,154,5,97,0,0,154,155,5,99,0,0,155,156,5,114,0,
        0,156,157,5,111,0,0,157,28,1,0,0,0,158,159,5,114,0,0,159,160,5,101,
        0,0,160,161,5,115,0,0,161,162,5,116,0,0,162,163,5,111,0,0,163,164,
        5,114,0,0,164,165,5,101,0,0,165,30,1,0,0,0,166,167,5,114,0,0,167,
        168,5,115,0,0,168,169,5,101,0,0,169,170,5,99,0,0,170,171,5,116,0,
        0,171,32,1,0,0,0,172,173,5,115,0,0,173,174,5,97,0,0,174,175,5,118,
        0,0,175,176,5,101,0,0,176,34,1,0,0,0,177,178,5,115,0,0,178,179,5,
        116,0,0,179,180,5,97,0,0,180,181,5,121,0,0,181,182,5,115,0,0,182,
        36,1,0,0,0,183,184,5,116,0,0,184,185,5,104,0,0,185,186,5,101,0,0,
        186,187,5,110,0,0,187,38,1,0,0,0,188,189,5,116,0,0,189,190,5,112,
        0,0,190,191,5,108,0,0,191,192,5,97,0,0,192,193,5,116,0,0,193,194,
        5,101,0,0,194,40,1,0,0,0,195,196,5,117,0,0,196,197,5,110,0,0,197,
        198,5,116,0,0,198,199,5,105,0,0,199,200,5,108,0,0,200,42,1,0,0,0,
        201,202,5,119,0,0,202,203,5,101,0,0,203,204,5,110,0,0,204,205,5,
        100,0,0,205,44,1,0,0,0,206,207,5,119,0,0,207,208,5,104,0,0,208,209,
        5,105,0,0,209,210,5,108,0,0,210,211,5,101,0,0,211,46,1,0,0,0,212,
        213,5,108,0,0,213,214,5,111,0,0,214,215,5,119,0,0,215,48,1,0,0,0,
        216,217,5,104,0,0,217,218,5,105,0,0,218,219,5,103,0,0,219,220,5,
        104,0,0,220,50,1,0,0,0,221,222,5,46,0,0,222,52,1,0,0,0,223,224,5,
        44,0,0,224,54,1,0,0,0,225,226,5,43,0,0,226,56,1,0,0,0,227,228,5,
        45,0,0,228,58,1,0,0,0,229,230,5,58,0,0,230,60,1,0,0,0,231,232,5,
        42,0,0,232,62,1,0,0,0,233,234,5,62,0,0,234,64,1,0,0,0,235,236,5,
        40,0,0,236,66,1,0,0,0,237,238,5,41,0,0,238,68,1,0,0,0,239,240,5,
        45,0,0,240,241,5,124,0,0,241,70,1,0,0,0,242,243,5,114,0,0,243,244,
        7,0,0,0,244,72,1,0,0,0,245,249,7,1,0,0,246,248,7,2,0,0,247,246,1,
        0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,249,250,1,0,0,0,250,74,1,0,
        0,0,251,249,1,0,0,0,252,254,7,3,0,0,253,252,1,0,0,0,254,255,1,0,
        0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,76,1,0,0,0,257,258,5,48,
        0,0,258,259,5,98,0,0,259,261,1,0,0,0,260,262,7,4,0,0,261,260,1,0,
        0,0,262,263,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,78,1,0,0,
        0,265,266,5,48,0,0,266,267,5,120,0,0,267,269,1,0,0,0,268,270,7,5,
        0,0,269,268,1,0,0,0,270,271,1,0,0,0,271,269,1,0,0,0,271,272,1,0,
        0,0,272,80,1,0,0,0,273,277,5,34,0,0,274,276,8,6,0,0,275,274,1,0,
        0,0,276,279,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,291,1,0,
        0,0,279,277,1,0,0,0,280,281,5,92,0,0,281,282,9,0,0,0,282,286,1,0,
        0,0,283,285,8,6,0,0,284,283,1,0,0,0,285,288,1,0,0,0,286,284,1,0,
        0,0,286,287,1,0,0,0,287,290,1,0,0,0,288,286,1,0,0,0,289,280,1,0,
        0,0,290,293,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,294,1,0,
        0,0,293,291,1,0,0,0,294,295,5,34,0,0,295,82,1,0,0,0,296,300,5,39,
        0,0,297,298,5,92,0,0,298,301,9,0,0,0,299,301,8,7,0,0,300,297,1,0,
        0,0,300,299,1,0,0,0,301,302,1,0,0,0,302,303,5,39,0,0,303,84,1,0,
        0,0,304,306,5,13,0,0,305,304,1,0,0,0,305,306,1,0,0,0,306,307,1,0,
        0,0,307,308,5,10,0,0,308,86,1,0,0,0,309,313,5,35,0,0,310,312,8,8,
        0,0,311,310,1,0,0,0,312,315,1,0,0,0,313,311,1,0,0,0,313,314,1,0,
        0,0,314,316,1,0,0,0,315,313,1,0,0,0,316,317,6,43,0,0,317,88,1,0,
        0,0,318,319,7,9,0,0,319,320,1,0,0,0,320,321,6,44,0,0,321,90,1,0,
        0,0,322,323,5,102,0,0,323,324,5,112,0,0,324,325,5,45,0,0,325,327,
        1,0,0,0,326,328,7,10,0,0,327,326,1,0,0,0,328,329,1,0,0,0,329,327,
        1,0,0,0,329,330,1,0,0,0,330,92,1,0,0,0,331,332,7,11,0,0,332,94,1,
        0,0,0,12,0,249,255,263,271,277,286,291,300,305,313,329,1,6,0,0
    ]

class AsmLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Asect = 1
    Break = 2
    Continue = 3
    Dc = 4
    Do = 5
    Ds = 6
    Else = 7
    End = 8
    Ext = 9
    Fi = 10
    Goto = 11
    If = 12
    Is = 13
    Macro = 14
    Restore = 15
    Rsect = 16
    Save = 17
    Stays = 18
    Then = 19
    Tplate = 20
    Until = 21
    Wend = 22
    While = 23
    Low = 24
    High = 25
    DOT = 26
    COMMA = 27
    PLUS = 28
    MINUS = 29
    COLON = 30
    ASTERISK = 31
    ANGLE_BRACKET = 32
    OPEN_PAREN = 33
    CLOSE_PAREN = 34
    LINE_MARK_MARKER = 35
    REGISTER = 36
    WORD = 37
    DECIMAL_NUMBER = 38
    BINARY_NUMBER = 39
    HEX_NUMBER = 40
    STRING = 41
    CHAR = 42
    NEWLINE = 43
    COMMENT = 44
    WS = 45
    BASE64 = 46
    UNEXPECTED_TOKEN = 47

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'asect'", "'break'", "'continue'", "'dc'", "'do'", "'ds'", 
            "'else'", "'end'", "'ext'", "'fi'", "'goto'", "'if'", "'is'", 
            "'macro'", "'restore'", "'rsect'", "'save'", "'stays'", "'then'", 
            "'tplate'", "'until'", "'wend'", "'while'", "'low'", "'high'", 
            "'.'", "','", "'+'", "'-'", "':'", "'*'", "'>'", "'('", "')'", 
            "'-|'" ]

    symbolicNames = [ "<INVALID>",
            "Asect", "Break", "Continue", "Dc", "Do", "Ds", "Else", "End", 
            "Ext", "Fi", "Goto", "If", "Is", "Macro", "Restore", "Rsect", 
            "Save", "Stays", "Then", "Tplate", "Until", "Wend", "While", 
            "Low", "High", "DOT", "COMMA", "PLUS", "MINUS", "COLON", "ASTERISK", 
            "ANGLE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", "LINE_MARK_MARKER", 
            "REGISTER", "WORD", "DECIMAL_NUMBER", "BINARY_NUMBER", "HEX_NUMBER", 
            "STRING", "CHAR", "NEWLINE", "COMMENT", "WS", "BASE64", "UNEXPECTED_TOKEN" ]

    ruleNames = [ "Asect", "Break", "Continue", "Dc", "Do", "Ds", "Else", 
                  "End", "Ext", "Fi", "Goto", "If", "Is", "Macro", "Restore", 
                  "Rsect", "Save", "Stays", "Then", "Tplate", "Until", "Wend", 
                  "While", "Low", "High", "DOT", "COMMA", "PLUS", "MINUS", 
                  "COLON", "ASTERISK", "ANGLE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", 
                  "LINE_MARK_MARKER", "REGISTER", "WORD", "DECIMAL_NUMBER", 
                  "BINARY_NUMBER", "HEX_NUMBER", "STRING", "CHAR", "NEWLINE", 
                  "COMMENT", "WS", "BASE64", "UNEXPECTED_TOKEN" ]

    grammarFileName = "AsmLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


